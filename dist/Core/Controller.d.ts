import { IBlockRenderer, Block } from "./Block";
import { Connection, IConnectionRenderer } from "./Connection";
import { BlockClass, BlockRegistration } from "./BlockRegistration";
import { Connector, ConnectorEventType } from "./Connector";
import { ServicesHandler } from "../Blocks/Libraries/ServiceLib";
import { Service } from "../Blocks/Services/Service";
import { ExternalConnector } from "./ExternalConnector";
import { BlockoTargetInterface } from "../Blocks/InterfaceBlock";
import { Message } from './Message';
export interface IRendererFactory {
    factoryBlockRenderer(block: Block): IBlockRenderer;
    factoryConnectionRenderer(connection: Connection): IConnectionRenderer;
}
export interface BlockoInstanceConfig {
    inputEnabled: boolean;
    outputEnabled: boolean;
    asyncEventsEnabled: boolean;
}
export declare class Controller {
    blocksRegister: Array<BlockRegistration>;
    blocks: Array<Block>;
    connections: Array<Connection>;
    rendererFactory: IRendererFactory;
    safeRun: boolean;
    configuration: BlockoInstanceConfig;
    protected _servicesHandler: ServicesHandler;
    constructor();
    registerService(service: Service): void;
    readonly servicesHandler: ServicesHandler;
    registerBlocks(blocksClass: Array<BlockClass>): void;
    registerBlock(blockClass: BlockClass): void;
    getBlockClassByVisualType(visualType: string): BlockClass;
    private blockAddedCallbacks;
    registerBlockAddedCallback(callback: (block: Block) => void): void;
    addBlock(block: Block): void;
    private connectionAddedCallbacks;
    registerConnectionAddedCallback(callback: (connection: Connection) => void): void;
    _addConnection(connection: Connection): void;
    private connectionRemovedCallbacks;
    registerConnectionRemovedCallback(callback: (connection: Connection) => void): void;
    _removeConnection(connection: Connection): void;
    private blockRemovedCallbacks;
    registerBlockRemovedCallback(callback: (block: Block) => void): void;
    _removeBlock(block: Block): void;
    removeAllBlocks(): void;
    getBlockById(id: string): Block;
    private blockIndex;
    getFreeBlockId(): string;
    private factoryBlockRendererCallback;
    registerFactoryBlockRendererCallback(callback: (block: Block) => IBlockRenderer): void;
    private factoryConnectionRendererCallback;
    registerFactoryConnectionRendererCallback(callback: (connection: Connection) => IConnectionRenderer): void;
    private inputConnectorEventCallbacks;
    registerInputConnectorEventCallback(callback: (block: Block, connector: Connector, eventType: ConnectorEventType, value: boolean | number | Message) => void): void;
    private outputConnectorEventCallbacks;
    registerOutputConnectorEventCallback(callback: (block: Block, connector: Connector, eventType: ConnectorEventType, value: boolean | number | Message) => void): void;
    private externalInputConnectorEventCallbacks;
    registerExternalInputConnectorEventCallback(callback: (block: Block, connector: ExternalConnector<any>, eventType: ConnectorEventType, value: boolean | number | Message) => void): void;
    private externalOutputConnectorEventCallbacks;
    registerExternalOutputConnectorEventCallback(callback: (block: Block, connector: ExternalConnector<any>, eventType: ConnectorEventType, value: boolean | number | Message) => void): void;
    private inputConnectorEvent(connector, eventType, value);
    private outputConnectorEvent(connector, eventType, value);
    private externalInputConnectorEvent(connector, eventType, value);
    private externalOutputConnectorEvent(connector, eventType, value);
    private errorCallbacks;
    registerErrorCallback(callback: (block: Block, error: any) => void): void;
    _emitError(block: Block, error: any): void;
    private logCallbacks;
    registerLogCallback(callback: (block: Block, type: string, message: any) => void): void;
    _emitLog(block: Block, type: string, message: any): void;
    setDigitalValue(targetId: string, groupIds: string[], name: string, value: boolean): void;
    setAnalogValue(targetId: string, groupIds: string[], name: string, value: number): void;
    setMessageValue(targetId: string, groupIds: string[], name: string, message: Message): void;
    setInputConnectorValue(blockId: string, connectorName: string, value: number): void;
    setOutputConnectorValue(blockId: string, connectorName: string, value: number): void;
    getDigitalInputNames(): Array<any>;
    getAnalogInputNames(): Array<any>;
    getMessageInputNames(): Array<any>;
    getDigitalOutputNames(): Array<string>;
    getAnalogOutputNames(): Array<string>;
    getMessageOutputNames(): Array<string>;
    setError(blockId: string, enabled: boolean): void;
    setInterfaces(interfaces: BlockoTargetInterface[]): void;
    getDataJson(): string;
    setDataJson(jsonString: string): string;
}
