import { ConnectorEvent, Connector, ConnectorEventType } from './Connector';
import { ExternalConnector, ExternalConnectorEvent } from './ExternalConnector';
import { ConfigProperty } from './ConfigProperty';
import { Controller } from './Controller';
import { Message, MessageJson } from './Message';
import { Types } from 'common-lib';
import { IRenderer } from './Renderer';
export interface IBlockRenderer extends IRenderer {
    isHovered(): boolean;
}
export declare class Block {
    protected inputConnectors: Array<Connector<boolean | number | object | Message>>;
    protected outputConnectors: Array<Connector<boolean | number | object | Message>>;
    protected externalInputConnectors: Array<ExternalConnector<any>>;
    protected externalOutputsConnectors: Array<ExternalConnector<any>>;
    protected configProperties: Array<ConfigProperty>;
    protected _blockId: string;
    protected _versionId: string;
    protected _color: string;
    id: string;
    type: string;
    visualType: string;
    configPropertiesDescription: string;
    renderer: IBlockRenderer;
    protected _controller: Controller;
    private _x;
    private _y;
    protected _codeBlock: boolean;
    constructor(id: string, type: string, visualType: string);
    controller: Controller;
    protected afterControllerSet(): void;
    readonly codeBlock: boolean;
    x: number;
    y: number;
    sendValueToOutputConnector(event: ConnectorEvent): void;
    addOutputConnector(id: string, type: Types.ConnectorType, name?: string, argTypes?: Types.Type[]): Connector<boolean | number | object | Message>;
    addInputConnector(id: string, type: Types.ConnectorType, name?: string, argTypes?: Types.Type[]): Connector<boolean | number | object | Message>;
    removeOutputConnector(connector: Connector<boolean | number | object | Message>): void;
    removeInputConnector(connector: Connector<boolean | number | object | Message>): void;
    protected addExternalInputConnector(targetId: string, name: string, type: Types.ConnectorType, argTypes?: Types.Type[]): ExternalConnector<any>;
    protected addExternalOutputConnector(targetId: string, name: string, type: Types.ConnectorType, argTypes?: Types.Type[]): ExternalConnector<any>;
    protected removeExternalInputConnector(connector: ExternalConnector<any>): void;
    protected removeExternalOutputConnector(connector: ExternalConnector<any>): void;
    addConfigProperty(type: Types.ConfigPropertyType, id: string, displayName: string, defaultValue: any, config?: any): ConfigProperty;
    getConfigProperties(): Array<ConfigProperty>;
    removeConfigProperty(configProperty: ConfigProperty): void;
    getInputConnectors(): Array<Connector<boolean | number | object | Message>>;
    getOutputConnectors(): Array<Connector<boolean | number | object | Message>>;
    getExternalInputConnectors(): Array<ExternalConnector<any>>;
    getExternalOutputConnectors(): Array<ExternalConnector<any>>;
    private initializationCallbacks;
    registerInitializationCallback(callback: () => void): void;
    initialize(): void;
    private outputEventCallbacks;
    registerOutputEventCallback(callback: (connector: Connector<boolean | number | object | Message>, eventType: ConnectorEventType, value: boolean | number | MessageJson | Object) => void): void;
    _outputEvent(event: ConnectorEvent): void;
    protected outputChanged(event: ConnectorEvent): void;
    private inputEventCallbacks;
    registerInputEventCallback(callback: (connector: Connector<boolean | number | object | Message>, eventType: ConnectorEventType, value: boolean | number | MessageJson | Object) => void): void;
    _inputEvent(event: ConnectorEvent): void;
    protected inputChanged(event: ConnectorEvent): void;
    private externalOutputEventCallbacks;
    registerExternalOutputEventCallback(callback: (connector: ExternalConnector<any>, eventType: ConnectorEventType, value: boolean | number | Message) => void): void;
    _externalOutputEvent(event: ExternalConnectorEvent): void;
    externalOutputEvent(event: ExternalConnectorEvent): void;
    private externalInputEventCallbacks;
    registerExternalInputEventCallback(callback: (connector: ExternalConnector<any>, eventType: ConnectorEventType, value: boolean | number | Message) => void): void;
    _externalInputEvent(event: ExternalConnectorEvent): void;
    externalInputEvent(event: ExternalConnectorEvent): void;
    private configChangedCallbacks;
    registerConfigChangedCallback(callback: () => void): void;
    emitConfigChanged(): void;
    getConfigData(): any;
    getConfigPropertyByName(name: string): ConfigProperty;
    setConfigData(json: any): void;
    private disconnectConnectionFromConnector(connector);
    remove(): void;
    getOutputConnectorById(id: string): Connector<boolean | number | object | Message>;
    getInputConnectorById(id: string): Connector<boolean | number | object | Message>;
    configChanged(): void;
    onMouseDrag(event: {
        dx: number;
        dy: number;
    }): boolean;
    onMouseClick(): void;
    onMouseDown(): void;
    onMouseUp(): void;
    isInterface(): boolean;
    rendererGetDisplayName(): string;
    rendererGetBlockName(): string;
    rendererGetCodeName(): string;
    rendererIsHwAttached(): boolean;
    readonly blockId: string;
    versionId: string;
}
